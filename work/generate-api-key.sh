#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

echo "Creating N8N API Key using Browser Automation (Container-Optimized)..."

# -----------------------------
# Helper: Timestamped log
log() { printf '%s %s\n' "[$(date -u +'%Y-%m-%dT%H:%M:%SZ')]" "$*"; }

# -----------------------------
# ตรวจสอบ environment variables ที่จำเป็น
check_env_vars() {
    local required_vars=("N8N_USER_EMAIL" "N8N_USER_PASSWORD")
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var:-}" ]; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        log "ERROR: Missing required environment variables:"
        printf '%s\n' "${missing_vars[@]}"
        exit 1
    fi
}

# -----------------------------
# ตรวจสอบ Chromium path (fallback)
set_chromium_path() {
    if [ -n "${PUPPETEER_EXECUTABLE_PATH:-}" ] && [ -x "${PUPPETEER_EXECUTABLE_PATH}" ]; then
        CHROME_BIN="${PUPPETEER_EXECUTABLE_PATH}"
    elif [ -x "/usr/bin/chromium-browser" ]; then
        CHROME_BIN="/usr/bin/chromium-browser"
    elif [ -x "/usr/bin/chromium" ]; then
        CHROME_BIN="/usr/bin/chromium"
    elif command -v chromium >/dev/null 2>&1; then
        CHROME_BIN="$(command -v chromium)"
    else
        log "❌ Chromium binary not found in container. Checked /usr/bin/chromium-browser, /usr/bin/chromium"
        exit 1
    fi
    export PUPPETEER_EXECUTABLE_PATH="$CHROME_BIN"
    log "✅ Chromium path set to: $PUPPETEER_EXECUTABLE_PATH"
}

# -----------------------------
# ตรวจสอบ puppeteer ใน node_modules (ถ้าไม่เจอ ให้แนะนำแก้ไข)
ensure_puppeteer_installed() {
    # prefer installed by Dockerfile. Check local node_modules
    if node -e "require.resolve('puppeteer')" >/dev/null 2>&1; then
        log "✅ puppeteer is installed"
        return 0
    fi

    log "⚠️ puppeteer not found in node_modules. Attempting to install at runtime (fallback). Recommended: install puppeteer in Docker image."
    # Try to install to /work/node_modules
    if [ -w "/work" ] || [ -w "." ]; then
        log "Running npm install puppeteer --no-audit --no-fund --no-save"
        if npm install puppeteer --omit=dev --no-audit --no-fund; then
            log "✅ puppeteer installed at runtime"
            return 0
        else
            log "❌ npm install puppeteer failed"
            # continue to fail later
        fi
    else
        log "❌ No write permission to /work to install puppeteer at runtime"
    fi

    # final fail
    log "ERROR: puppeteer module not installed. Please install puppeteer in Dockerfile (npm install puppeteer) or ensure node_modules is present."
    exit 1
}

# -----------------------------
# สร้าง Node.js script ที่เหมาะกับ container environment
create_automation_script() {
    cat > /work/create-api-key.js <<'EOF'
/**
 * create-api-key.js
 * Generated by generate-api-key.sh
 */
const fs = require('fs');
const path = require('path');

(async () => {
  const puppeteer = require('puppeteer');
  const N8N_URL = process.env.N8N_WORKING_URL;
  const EMAIL = process.env.N8N_USER_EMAIL;
  const PASSWORD = process.env.N8N_USER_PASSWORD;
  const EXEC_PATH = process.env.PUPPETEER_EXECUTABLE_PATH || '/usr/bin/chromium';

  function log() { console.log(new Date().toISOString(), ...arguments); }

  if (!N8N_URL || !EMAIL || !PASSWORD) {
    log('Missing required environment variables (N8N_WORKING_URL, N8N_USER_EMAIL, N8N_USER_PASSWORD)');
    process.exit(1);
  }

  log('Launching puppeteer with executablePath=' + EXEC_PATH);

  let browser;
  try {
    browser = await puppeteer.launch({
      executablePath: EXEC_PATH,
      headless: 'new',
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--no-zygote',
        '--disable-background-timer-throttling',
        '--disable-renderer-backgrounding',
        '--disable-features=TranslateUI'
      ],
      defaultViewport: { width: 1280, height: 800 },
      timeout: 120000
    });

    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36');

    // intercept and block heavy resources to speed up
    await page.setRequestInterception(true);
    page.on('request', req => {
      const t = req.resourceType();
      if (['image','stylesheet','font','media'].includes(t)) return req.abort();
      return req.continue();
    });

    log('Navigating to signin page:', `${N8N_URL}/signin`);
    try {
      await page.goto(`${N8N_URL}/signin`, { waitUntil: 'domcontentloaded', timeout: 60000 });
    } catch (e) {
      log('Navigation to /signin failed, fallback to root then /signin', e.message);
      await page.goto(N8N_URL, { waitUntil: 'domcontentloaded', timeout: 60000 });
      await page.goto(`${N8N_URL}/signin`, { waitUntil: 'domcontentloaded', timeout: 60000 });
    }

    await page.waitForTimeout(1500);
    await page.screenshot({ path: '/work/01-signin.png' });

    // find inputs
    const emailSel = 'input[type="email"], input[name="email"], input[placeholder*="email"]';
    const passSel = 'input[type="password"], input[name="password"]';

    await page.waitForSelector(emailSel, { visible: true, timeout: 30000 });
    await page.waitForSelector(passSel, { visible: true, timeout: 30000 });

    await page.click(emailSel);
    await page.type(emailSel, EMAIL, { delay: 50 });

    await page.click(passSel);
    await page.type(passSel, PASSWORD, { delay: 50 });

    await page.screenshot({ path: '/work/02-form-filled.png' });

    // submit — try submit button first else press Enter
    try {
      const submitBtn = await page.$('button[type="submit"], button:contains("Sign in"), button:contains("Sign in")');
      if (submitBtn) {
        await submitBtn.click();
      } else {
        await page.keyboard.press('Enter');
      }
    } catch (e) {
      await page.keyboard.press('Enter');
    }

    // wait for navigation or url change
    try {
      await page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 45000 });
      log('Login navigation finished');
    } catch (e) {
      log('Login navigation timeout - checking URL');
      const url = page.url();
      log('Current URL after login attempt:', url);
      if (url.includes('/signin')) {
        throw new Error('Login appears to have failed (still on /signin)');
      }
    }

    await page.screenshot({ path: '/work/03-after-login.png' });

    // Navigate to API settings page where API key is created
    log('Navigating to API settings page:', `${N8N_URL}/settings/api`);
    await page.goto(`${N8N_URL}/settings/api`, { waitUntil: 'domcontentloaded', timeout: 60000 });
    await page.waitForTimeout(2000);
    await page.screenshot({ path: '/work/04-api-page.png' });

    // Try to find the create button (different UI variants)
    const selectors = [
      'button:contains("Create API key")',
      'button:contains("Create API Key")',
      'button:contains("Create")',
      'button:contains("Generate")',
      '.el-button--primary',
      '[data-test*="create"]',
      '[data-test*="generate"]'
    ];

    let createButton = null;
    for (const s of selectors) {
      try {
        const el = await page.$(s);
        if (el) {
          createButton = el;
          log('Found create button via selector:', s);
          break;
        }
      } catch (e) {
        // ignore
      }
    }

    if (!createButton) {
      // fallback: try to click any prominent primary button
      const fallback = await page.$('button');
      if (fallback) {
        log('No specific create button found - clicking first button as fallback');
        await fallback.click();
      } else {
        throw new Error('Create API key button not found');
      }
    } else {
      await createButton.click();
    }

    await page.waitForTimeout(4000);
    await page.screenshot({ path: '/work/05-after-create.png' });

    // Extraction heuristics
    let apiKey = null;
    const keySelectors = [
      'code',
      'pre',
      'input[readonly]',
      'textarea[readonly]',
      '[data-test*="api-key"]',
      '.el-input__inner[readonly]',
      '.api-key',
      '.token'
    ];

    for (const sel of keySelectors) {
      try {
        const els = await page.$$(sel);
        for (const el of els) {
          const val = await el.evaluate(e => e.textContent || e.value || e.getAttribute('value') || '');
          if (val && val.trim().length > 20 && /^[A-Za-z0-9_-]{20,}$/.test(val.trim())) {
            apiKey = val.trim();
            log('Found API key by selector:', sel);
            break;
          }
        }
        if (apiKey) break;
      } catch (e) {
        // ignore
      }
    }

    if (!apiKey) {
      log('Fallback: scanning page content for long token-like strings');
      const body = await page.content();
      const matches = (body.match(/[A-Za-z0-9_-]{32,}/g) || []);
      if (matches.length > 0) {
        apiKey = matches.reduce((a,b) => a.length > b.length ? a : b);
        log('Found API key from page scan');
      }
    }

    if (!apiKey) {
      await page.screenshot({ path: '/work/06-error-no-key.png' });
      throw new Error('Could not extract API key');
    }

    // save file
    fs.writeFileSync('/work/n8n-api-key.txt', apiKey);
    log('✅ API key extracted and saved. preview:', apiKey.substring(0,10) + '...');

    await browser.close();
    process.exit(0);

  } catch (err) {
    log('❌ Automation error:', err && err.message ? err.message : String(err));
    try { if (browser) await browser.close(); } catch(e) {}
    process.exit(1);
  }
})();
EOF

    log "✅ Container-optimized automation script created: /work/create-api-key.js"
}

# -----------------------------
# Simple health check (N8N พร้อมแล้วจาก log)
wait_for_n8n_simple() {
    log "Quick N8N availability check..."
    
    local n8n_urls=()
    
    if [ -n "${N8N_HOST:-}" ]; then
        n8n_urls+=("https://$N8N_HOST")
        n8n_urls+=("http://$N8N_HOST")
    fi
    
    n8n_urls+=("http://n8n:5678")
    
    log "Testing URLs: ${n8n_urls[*]}"
    
    for url in "${n8n_urls[@]}"; do
        log "Testing: $url/healthz"
        
        if curl -f -s --connect-timeout 10 --max-time 20 "$url/healthz" > /dev/null 2>&1; then
            export N8N_WORKING_URL="$url"
            log "✅ N8N ready: $url"
            return 0
        fi
    done
    
    log "❌ N8N not accessible"
    return 1
}

# -----------------------------
# Simple owner setup
setup_owner() {
    log "Setting up owner account..."
    
    local setup_url="${N8N_WORKING_URL%/}/rest/owner/setup"
    
    local response
    response=$(curl -s -X POST "$setup_url" \
        -H "Content-Type: application/json" \
        -d "{
            \"email\": \"${N8N_USER_EMAIL}\",
            \"firstName\": \"${N8N_FIRST_NAME:-Admin}\",
            \"lastName\": \"${N8N_LAST_NAME:-User}\",
            \"password\": \"${N8N_USER_PASSWORD}\"
        }" 2>&1 || true)
    
    log "Owner setup: $response"
    return 0
}

# -----------------------------
# Main execution
main() {
    log "=== Container-Optimized N8N API Key Generation ==="
    check_env_vars
    set_chromium_path
    ensure_puppeteer_installed

    if ! wait_for_n8n_simple; then
        log "❌ N8N not ready - aborting"
        exit 1
    fi

    setup_owner
    create_automation_script

    # run the node script (use /work/create-api-key.js)
    log "🕐 Starting automation: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
    cd /work || exit 1

    # Debug helpers (log some environment info)
    log "Node version:" "$(node -v 2>/dev/null || echo 'node not found')"
    log "PUPPETEER_EXECUTABLE_PATH: ${PUPPETEER_EXECUTABLE_PATH:-}"
    log "Listing /work contents:"
    ls -la /work || true

    # Run with timeout (adjustable)
    if timeout 300 node /work/create-api-key.js; then
        log "✅ Automation completed"
    else
        local exit_code=$?
        log "❌ Automation failed: exit code $exit_code"
        # show debug info
        ls -la /work || true
        ls -la /work/*.png 2>/dev/null || log "No screenshots present"
        exit 1
    fi

    # Validate result
    if [ -f /work/n8n-api-key.txt ]; then
        local key_length
        key_length=$(wc -c < /work/n8n-api-key.txt)
        local key_preview
        key_preview=$(head -c 10 /work/n8n-api-key.txt || true)
        log "🎉 SUCCESS!"
        log "File: /work/n8n-api-key.txt"
        log "Length: $key_length chars"
        log "Preview: ${key_preview}..."
        if [ "$key_length" -gt 20 ]; then
            exit 0
        else
            log "⚠️ Key too short: $key_length chars"
            exit 1
        fi
    else
        log "❌ No API key file created"
        ls -la /work || true
        ls -la /work/*.png 2>/dev/null || log "No screenshots"
        exit 1
    fi
}

# -----------------------------
main "$@"
